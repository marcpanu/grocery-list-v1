import React, { useState, useEffect, useRef } from 'react';
import { ShoppingListItem } from './ShoppingListItem';
import { StoreSelector } from './StoreSelector';
import { createShoppingList, getShoppingList, addItemToList, getUserShoppingLists, updateShoppingList, updateItemInList } from '../firebase/firestore';
import { ShoppingList as ShoppingListType, NewShoppingItem, Category, Store, ViewMode } from '../types/index';
import { AddItemModal } from './AddItemModal';
import { 
  Squares2X2Icon,
  ListBulletIcon,
  EyeIcon,
  EyeSlashIcon,
  FunnelIcon,
} from '@heroicons/react/24/outline';
import { DragDropContext, Droppable, DropResult } from '@hello-pangea/dnd';

// Since this is a single-user app, we'll use a constant ID
const USER_ID = 'default-user';

interface ShoppingListProps {
  viewMode: ViewMode;
  showCompleted: boolean;
  currentStore: string;
  showStoreFilter: boolean;
  onViewModeChange: (mode: ViewMode) => void;
  onShowCompletedChange: (show: boolean) => void;
  onCurrentStoreChange: (storeId: string) => void;
  onShowStoreFilterChange: (show: boolean) => void;
}

export const ShoppingList: React.FC<ShoppingListProps> = ({
  viewMode,
  showCompleted,
  currentStore,
  showStoreFilter,
  onViewModeChange,
  onShowCompletedChange,
  onCurrentStoreChange,
  onShowStoreFilterChange
}) => {
  const [list, setList] = useState<ShoppingListType | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [newItemName, setNewItemName] = useState('');
  const [newItemQuantity, setNewItemQuantity] = useState('1');
  const [newItemUnit, setNewItemUnit] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<Category | undefined>(undefined);
  const [selectedStore, setSelectedStore] = useState<Store | undefined>(undefined);
  const [showConfig, setShowConfig] = useState(false);
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);

  // Refs for click outside handling
  const storeFilterRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (storeFilterRef.current && !storeFilterRef.current.contains(event.target as Node)) {
        setShowConfig(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  useEffect(() => {
    const initializeList = async () => {
      try {
        const userLists = await getUserShoppingLists(USER_ID);
        
        let activeList: ShoppingListType;
        if (userLists.length > 0) {
          activeList = userLists[0];
        } else {
          activeList = await createShoppingList(USER_ID, 'Shopping List');
        }
        
        setList(activeList);
      } catch (err) {
        setError('Failed to initialize shopping list');
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    initializeList();
  }, []);

  const refreshList = async () => {
    if (!list?.id) return;
    
    try {
      const updatedList = await getShoppingList(list.id);
      if (updatedList) {
        setList(updatedList);
      } else {
        setError('Shopping list not found');
      }
    } catch (err) {
      setError('Failed to refresh list');
      console.error(err);
    }
  };

  const handleAddItem = async (item: NewShoppingItem) => {
    if (!list?.id) return;

    try {
      await addItemToList(list.id, item);
      setNewItemName('');
      setNewItemQuantity('1');
      setNewItemUnit('');
      setSelectedCategory(undefined);
      setSelectedStore(undefined);
      refreshList();
    } catch (err) {
      console.error('Failed to add item:', err);
    }
  };

  const handleViewModeChange = async (newMode: ViewMode) => {
    if (!list?.id) return;
    onViewModeChange(newMode);
    try {
      await updateShoppingList(list.id, { viewMode: newMode });
      refreshList();
    } catch (err) {
      console.error('Failed to update view mode:', err);
    }
  };

  const handleStoreFilterChange = async (storeId: string) => {
    if (!list?.id) return;
    onCurrentStoreChange(storeId);
    try {
      await updateShoppingList(list.id, { currentStore: storeId });
      refreshList();
    } catch (err) {
      console.error('Failed to update store filter:', err);
    }
  };

  const handleToggleCompleted = async () => {
    if (!list?.id) return;
    const newShowCompleted = !showCompleted;
    onShowCompletedChange(newShowCompleted);
    try {
      await updateShoppingList(list.id, { showCompleted: newShowCompleted });
      refreshList();
    } catch (err) {
      console.error('Failed to toggle completed items:', err);
    }
  };

  // Filter and sort items
  const getFilteredAndSortedItems = () => {
    if (!list) return [];

    // First filter by completion status
    let items = showCompleted 
      ? list.items 
      : list.items.filter(item => !item.checked);

    // Then filter by current store if not in "all" view
    if (currentStore !== 'all') {
      items = items.filter(item => item.store?.id === currentStore);
    }

    // Sort by category order and then by item order within each category
    return items.sort((a, b) => {
      // First sort by category order
      const categoryOrderA = a.category?.order ?? Number.MAX_SAFE_INTEGER;
      const categoryOrderB = b.category?.order ?? Number.MAX_SAFE_INTEGER;
      if (categoryOrderA !== categoryOrderB) {
        return categoryOrderA - categoryOrderB;
      }

      // Then sort by item order within the category
      const orderA = a.order ?? 0;
      const orderB = b.order ?? 0;
      return orderA - orderB;
    });
  };

  const handleDragEnd = async (result: DropResult) => {
    const { destination, source, draggableId } = result;
    console.log('Drag end:', { destination, source, draggableId });

    // Drop was cancelled or dropped outside a droppable
    if (!destination || !list) return;

    // If dropped in the same position, do nothing
    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    // Find the item being dragged
    const item = list.items.find(item => item.id === draggableId);
    if (!item) return;

    try {
      // Get the store ID from the droppable ID (format: "store-{storeId}")
      const newStoreId = destination.droppableId.replace('store-', '');
      
      // For the "all" view, we don't change the store
      let newStore = undefined;
      const isStoreChange = newStoreId !== 'all' && item.store?.id !== newStoreId;
      
      if (isStoreChange) {
        newStore = list.stores.find(store => store.id === newStoreId);
        console.log('Moving item to new store:', newStore?.name);
      } else {
        console.log('Reordering within same store/category');
      }

      // Get items in the same category and store as the destination
      const itemsInSameGroup = list.items.filter(i => {
        if (viewMode === 'sequential') {
          // In sequential view, group by store and category
          return i.store?.id === (isStoreChange ? newStoreId : item.store?.id) && i.category?.id === item.category?.id;
        } else {
          // In combined view, group by category only
          return i.category?.id === item.category?.id;
        }
      });
      console.log('Items in same group:', itemsInSameGroup.length);
      
      // Log current order values
      console.log('Current order values:', itemsInSameGroup.map(i => ({ id: i.id, name: i.name, order: i.order })));

      // Create a new array of items with updated indices
      const updatedItems = [...itemsInSameGroup];
      
      // Remove the dragged item from its original position (if it's in this group)
      const itemIndex = updatedItems.findIndex(i => i.id === item.id);
      if (itemIndex !== -1) {
        updatedItems.splice(itemIndex, 1);
      }
      
      // Insert the dragged item at its new position
      updatedItems.splice(destination.index, 0, item);
      
      // Update the order of all items in the group
      const updatePromises = updatedItems.map((item, index) => {
        // Create a clean updates object with only defined values
        const updates: Record<string, any> = { 
          order: index * 1000 // Use a large gap to avoid conflicts
        };
        
        // Only update store if it's the dragged item AND the store has changed AND we have a valid new store
        if (item.id === draggableId && isStoreChange && newStore) {
          updates.store = newStore;
        }
        
        console.log(`Updating item ${item.name} with:`, updates);
        
        return updateItemInList(list.id, item.id, updates);
      });
      
      // Log the new order values
      console.log('New order values will be:', updatedItems.map((i, index) => ({ 
        id: i.id, 
        name: i.name, 
        oldOrder: i.order, 
        newOrder: index * 1000 
      })));
      
      // Wait for all updates to complete
      await Promise.all(updatePromises);
      console.log('All updates completed successfully');
      
      // Refresh the list
      await refreshList();
      console.log('List refreshed');
      
      // Verify the order values after refresh
      const refreshedList = await getShoppingList(list.id);
      if (refreshedList) {
        const refreshedItems = refreshedList.items.filter(i => 
          itemsInSameGroup.some(original => original.id === i.id)
        );
        console.log('Order values after refresh:', refreshedItems.map(i => ({ 
          id: i.id, 
          name: i.name, 
          order: i.order 
        })));
      }
    } catch (err) {
      console.error('Failed to update items:', err);
    }
  };

  // Loading state
  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-[200px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-violet-600" />
      </div>
    );
  }

  if (error) return <div className="text-red-500">{error}</div>;
  if (!list) return <div>No list found</div>;

  const filteredItems = getFilteredAndSortedItems();

  // Group items by category
  const itemsByCategory = filteredItems.reduce((acc, item) => {
    const categoryId = item.category?.id || 'uncategorized';
    if (!acc[categoryId]) {
      acc[categoryId] = [];
    }
    acc[categoryId].push(item);
    return acc;
  }, {} as Record<string, typeof filteredItems>);

  // Sort items within each category by order
  Object.keys(itemsByCategory).forEach(categoryId => {
    itemsByCategory[categoryId].sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
  });

  // Group items by store, then by category
  const itemsByStore = filteredItems.reduce((acc, item) => {
    const storeId = item.store?.id || 'unassigned';
    if (!acc[storeId]) {
      acc[storeId] = {};
    }
    const categoryId = item.category?.id || 'uncategorized';
    if (!acc[storeId][categoryId]) {
      acc[storeId][categoryId] = [];
    }
    acc[storeId][categoryId].push(item);
    return acc;
  }, {} as Record<string, Record<string, typeof filteredItems>>);

  // Sort items within each store and category by order
  Object.keys(itemsByStore).forEach(storeId => {
    Object.keys(itemsByStore[storeId]).forEach(categoryId => {
      itemsByStore[storeId][categoryId].sort((a, b) => (a.order ?? 0) - (b.order ?? 0));
    });
  });

  return (
    <div className="min-h-screen bg-zinc-50 pb-16">
      {/* List Content */}
      <div className="px-4 pt-4">
        <DragDropContext onDragEnd={handleDragEnd}>
          {viewMode === 'sequential' ? (
            <div className="space-y-4">
              {Object.entries(itemsByStore).map(([storeId, categorizedItems]) => {
                const store = list?.stores.find((s: Store) => s.id === storeId);
                return (
                  <div key={storeId} className="bg-white rounded-lg shadow-sm overflow-hidden">
                    <div className="px-3 py-2 bg-white border-b border-zinc-200">
                      <div className="flex items-center">
                        <svg className="w-4 h-4 text-violet-600 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                        </svg>
                        <h2 className="text-sm font-medium text-zinc-900">
                          {store?.name || 'Unassigned Store'}
                        </h2>
                      </div>
                    </div>
                    <Droppable droppableId={`